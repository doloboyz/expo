{"version":3,"file":"UseUpdatesUtils.js","sourceRoot":"","sources":["../src/UseUpdatesUtils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAIrC,iEAAiE;AACjE,MAAM,CAAC,MAAM,gBAAgB,GAAyB;IACpD,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,SAAS;IACvC,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,SAAS;IACrC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,SAAS;IACzC,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;IAC1C,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;IAC5C,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,SAAS;IACvC,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,SAAS;CACpD,CAAC;AAEF,mCAAmC;AAEnC,2CAA2C;AAC3C,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,QAAmB,EAAE,EAAE;IACxD,OAAO,QAAQ;QACb,CAAC,CAAC;YACE,QAAQ,EAAE,QAAQ,EAAE,EAAE,IAAI,SAAS;YACnC,SAAS,EACP,QAAQ,IAAI,WAAW,IAAI,QAAQ,IAAI,QAAQ,CAAC,SAAS;gBACvD,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC9B,CAAC,CAAC,QAAQ,IAAI,eAAe,IAAI,QAAQ,IAAI,QAAQ,CAAC,aAAa;oBACnE,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;oBAClC,CAAC,CAAC,SAAS;YACf,QAAQ,EAAE,QAAQ,IAAI,SAAS;SAChC;QACH,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC,CAAC;AAEF,4EAA4E;AAC5E,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,OAAyC,EAAE,EAAE,CACtF,kBAAkB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;AAE9C,6EAA6E;AAC7E,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,OAAyC,EAAE,EAAE,CACvF,kBAAkB,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;AAElD,6BAA6B;AAC7B,MAAM,CAAC,MAAM,sBAAsB,GAAwB;IACzD,UAAU,EAAE,KAAK;IACjB,aAAa,EAAE,KAAK;IACpB,iBAAiB,EAAE,KAAK;IACxB,eAAe,EAAE,KAAK;CACvB,CAAC;AAEF,yEAAyE;AACzE,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,YAAiC,EACjC,OAAyC,EACzC,EAAE;IACF,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,OAAO;YACL,GAAG,YAAY;YACf,UAAU,EAAE,IAAI;YAChB,kCAAkC,EAAE,IAAI,IAAI,EAAE;SAC/C,CAAC;KACH;IACD,MAAM,eAAe,GAAG,0BAA0B,CAAC,OAAO,CAAC,CAAC;IAC5D,MAAM,gBAAgB,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;IAC9D,OAAO;QACL,GAAG,YAAY;QACf,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;QAC5C,eAAe,EAAE,OAAO,CAAC,eAAe;QACxC,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,aAAa,EAAE,OAAO,CAAC,aAAa;QACpC,eAAe;QACf,gBAAgB;QAChB,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,aAAa,EAAE,OAAO,CAAC,aAAa;KACrC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as Updates from './Updates';\nimport type { Manifest, UpdatesNativeStateMachineContext } from './Updates.types';\nimport type { CurrentlyRunningInfo, UseUpdatesStateType } from './UseUpdates.types';\n\n// The currently running info, constructed from Updates constants\nexport const currentlyRunning: CurrentlyRunningInfo = {\n  updateId: Updates.updateId ?? undefined,\n  channel: Updates.channel ?? undefined,\n  createdAt: Updates.createdAt ?? undefined,\n  isEmbeddedLaunch: Updates.isEmbeddedLaunch,\n  isEmergencyLaunch: Updates.isEmergencyLaunch,\n  manifest: Updates.manifest ?? undefined,\n  runtimeVersion: Updates.runtimeVersion ?? undefined,\n};\n\n/////// Internal functions ////////\n\n// Constructs an UpdateInfo from a manifest\nexport const updateFromManifest = (manifest?: Manifest) => {\n  return manifest\n    ? {\n        updateId: manifest?.id ?? undefined,\n        createdAt:\n          manifest && 'createdAt' in manifest && manifest.createdAt\n            ? new Date(manifest.createdAt)\n            : manifest && 'publishedTime' in manifest && manifest.publishedTime\n            ? new Date(manifest.publishedTime)\n            : undefined,\n        manifest: manifest ?? undefined,\n      }\n    : undefined;\n};\n\n// Constructs the availableUpdate from the native state change event context\nexport const availableUpdateFromContext = (context: UpdatesNativeStateMachineContext) =>\n  updateFromManifest(context?.latestManifest);\n\n// Constructs the downloadedUpdate from the native state change event context\nexport const downloadedUpdateFromContext = (context: UpdatesNativeStateMachineContext) =>\n  updateFromManifest(context?.downloadedManifest);\n\n// Default useUpdates() state\nexport const defaultUseUpdatesState: UseUpdatesStateType = {\n  isChecking: false,\n  isDownloading: false,\n  isUpdateAvailable: false,\n  isUpdatePending: false,\n};\n\n// Transform the useUpdates() state based on native state machine context\nexport const reduceUpdatesStateFromContext = (\n  updatesState: UseUpdatesStateType,\n  context: UpdatesNativeStateMachineContext\n) => {\n  if (context.isChecking) {\n    return {\n      ...updatesState,\n      isChecking: true,\n      lastCheckForUpdateTimeSinceRestart: new Date(),\n    };\n  }\n  const availableUpdate = availableUpdateFromContext(context);\n  const downloadedUpdate = downloadedUpdateFromContext(context);\n  return {\n    ...updatesState,\n    isUpdateAvailable: context.isUpdateAvailable,\n    isUpdatePending: context.isUpdatePending,\n    isChecking: context.isChecking,\n    isDownloading: context.isDownloading,\n    availableUpdate,\n    downloadedUpdate,\n    checkError: context.checkError,\n    downloadError: context.downloadError,\n  };\n};\n"]}